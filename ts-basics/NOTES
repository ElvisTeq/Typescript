## 1 Installing & Using Typescript

----------------------------------------------- npm init -y
Create "package.json"

----------------------------------------------- npm i typesript
needs node.js

----------------------------------------------- npx tsc FILENAME
To compile file (convert into JS) for browser to undertand
[Browser can't read Typescript]

///////////////////////////////////////////////////////////////////////////////////////////////

## 2 Base Types

- "basics.ts"
  => Examples

///////////////////////////////////////////////////////////////////////////////////////////////

## 3 Type Inference

- "basics.ts"
  => Example

**\*** TS automatically will try to determine the Base Type automatically **\***
The initial value will determine the Type

///////////////////////////////////////////////////////////////////////////////////////////////

## 4 Union Types (To allow more than 1 type)

- "basics.ts"
  => Using { | } to add multiple types

----------------------------------------------- let anyName: string | number

----------------------------------------------- let anyName: string | string[]

///////////////////////////////////////////////////////////////////////////////////////////////

## 5 Type Aliases

- "basics.ts"
  => implementing { type }

---------------------------------------------- type anyName = { object }
To create an alias
So we can use "anyName" as reference

///////////////////////////////////////////////////////////////////////////////////////////////

## 6 Function types

- "basics.ts"
  => Function type examples

**\*** You can also set return types in functions **\***

**\*** void === function never returns (undefined) **\***

///////////////////////////////////////////////////////////////////////////////////////////////

## 7 Generics

- "basics.ts"
  => Using { <T> } to add Generic type to a function

**\*** Function will automatically knows we mixing numbers & strings **\***

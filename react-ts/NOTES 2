## 1 Starting our React-Typescript project

---------------------------------- npx create-react-app ANY-NAME --template typescript

- Projects added to
  => "react-ts"

**\*** No need to manually convert our TS to JS **\***
=> no need to { npx tsc FILENAME }
=> Also it automatically does when { npm run build }

///////////////////////////////////////////////////////////////////////////////////////////

## 2 Working with Components

- Created
  => "Todos.tsx" (Functional Component)

- "App.tsx"
  => Added Component to JSX

///////////////////////////////////////////////////////////////////////////////////////////

## 3 Working with Props & TypeScript

- "Todos.tsx"
  => Implementing { React.FC } (Type for React Components)
  => Using { <{}> } to create our own props type

------------------------------------------------- const anyName: React.FC = (props) => {}
TypeScript for React Functional Components

------------------------------------------------- <{anyName: string[]}>
To define/create our own Prop type

///////////////////////////////////////////////////////////////////////////////////////////

## 4 Adding a Data Model

- Created
  => "./models/todo.ts"
  => Creating Class using TypeScript

- "App.tsx"
  => Created DUMMY_DATA with our TS class

- "Todos.tsx"
  => We can add Imported Class Component and use it for TS Type
  => React.FC<{ items: Todo[] }>

///////////////////////////////////////////////////////////////////////////////////////////

## 5 Practice

- Created
  => "TodoItem.tsx"
  => Component for our <li> of Items
  => { React.FC<{}> } Implemented (To add JSX Type)

///////////////////////////////////////////////////////////////////////////////////////////

## 6 FormSubmission in TypeScript Projects (Events)

- "NewTodo.tsx"
  => Implementing { React.FormEvent } Type for React Events

----------------------------------------------- React.FormEvent
Type for React "Form" Events

----------------------------------------------- React.MouseEvent

///////////////////////////////////////////////////////////////////////////////////////////

## 7 Working with Refs & useRef

- "NewTodo.tsx"
  => Using { useRef() }
  => adding <HTMLInputElement> type to "useRef()"
  => useRef<HTMLInputElement>(null) => (Requires Default Starting Value (null) because no value)

// More HTML Types **\*** GOOGLE: "mdn input" **\***
----------------------------------------------- <HTMLInputElement>
----------------------------------------------- <HTMLButtonElement>

///////////////////////////////////////////////////////////////////////////////////////////

## 8 Working with "Function Props"

- "App.tsx"
  => imported { NewTodo } Form Component

- "NewTodo.tsx"
  => Created Function For "App.tsx" using { React.FC<{ FuncName: (DATA: string) => void }> }

----------------------------------------------- React.FC<{ FuncName: (DATA: string) => void }>
Creating a Prop Function

///////////////////////////////////////////////////////////////////////////////////////////

## 9 useState & TypeScript

- "App.tsx"
  => Implementing { useState } (Defining Type for "useState")
  => useState<Todo[]> (To Define Type for the state)
